[
	{
		"token": "a",
		"description": "Matches any character or word specified literally in the pattern.\nThis means the regex matches the exact sequence of characters written.\nIt does not match metacharacters unless they are escaped (e.g., `.` -> `\\.` or `*` -> `\\*`).\nThe metacharacter '.' will match every character except newline.",
		"exercises": [
			{
				"description": "Match every 'a' character in the text",
				"text": "abcABC123",
				"expected": ["a"]
			},
			{
				"description": "Match every '123' word in the text",
				"text": "12 123 1234",
				"expected": ["123", "123"]
			},
			{
				"description": "Match only cat and cut words in the text",
				"text": "cat cut coat",
				"expected": ["cat", "cut"]
			}
		]
	},
	{
		"token": "\\w",
		"description": "Matches any word character: letter (a-z, A-Z), digit (0-9), or underscore (_).\nTo match every non word character we can use '\\W'.",
		"exercises": [
			{
				"description": "Match every word character in the text",
				"text": "a1b2_  c3D4",
				"expected": ["a", "1", "b", "2", "_", "c", "3", "D", "4"]
			},
			{
				"description": "Match every non word character in the text",
				"text": "abc123-= def_456? ghi789.",
				"expected": ["-", "=", " ", "?", " ", "."]
			}
		]
	},
	{
		"token": "\\d",
		"description": "Matches any digit character (0-9).\nTo match any non digit character we can use '\\D'.",
		"exercises": [
			{
				"description": "Match every digit character in the text",
				"text": "a1b2c3d4",
				"expected": ["1", "2", "3", "4"]
			},
			{
				"description": "Match phone numbers in format 123-456-7890",
				"text": "Call me at 123-456-7890 or 987-654-3210.",
				"expected": ["123", "456", "7890", "987", "654", "3210"]
			},
			{
				"description": "Match every non digit character",
				"text": "a1b2c3d4",
				"expected": ["a", "b", "c", "d"]
			}
		]
	},
	{
		"token": "\\s",
		"description": "Matches any whitespace character (space, tab, newline).\nTo match any non whitespace character we can use '\\S'.",
		"exercises": [
			{
				"description": "Match all whitespace characters in the text",
				"text": "Hello world!\nThis is\tgreat.",
				"expected": [" ", "\n", " ", "\t"]
			},
			{
				"description": "Match sequences of two whitespace characters",
				"text": "a\t b\n c\t\t d",
				"expected": ["\t ", "\n ", "\t\t"]
			}
		]
	},
	{
		"token": "[abc]",
		"description": "Matches any character inside the brackets.",
		"exercises": [
			{
				"description": "Match vowels 'a', 'e', 'i' in text",
				"text": "apple pie is nice",
				"expected": ["a", "e", "i", "e", "i", "i", "e"]
			},
			{
				"description": "Match digits 1, 3, or 5 only",
				"text": "1234567890",
				"expected": ["1", "3", "5"]
			},
			{
				"description": "Match can, van, ran",
				"text": "man nan can lan van ran",
				"expected": ["can", "van", "ran"]
			}
		]
	},
	{
		"token": "[^abc]",
		"description": "Matches any character except those in the brackets.",
		"exercises": [
			{
				"description": "Match characters except a, b, c",
				"text": "abcxyzABC123",
				"expected": ["x", "y", "z", "A", "B", "C", "1", "2", "3"]
			},
			{
				"description": "Match digits only",
				"text": "abcdefghijkl1234567",
				"expected": ["1", "2", "3", "4", "5", "6", "7"]
			}
		]
	},
	{
		"token": "[a-z]",
		"description": "Matches any character between two specified character that can be digits or letters.",
		"exercises": [
			{
				"description": "Match lowercase letters only",
				"text": "AbCdeFGhij",
				"expected": ["b", "d", "e", "h", "i", "j"]
			}
		]
	},
	{
		"token": "?*+",
		"description": "'?' matches previous token 0 or 1 time.\n'*' matches previous token 0 or more time.\n'+' matches previous token 1 or more time.",
		"exercises": [
			{
				"description": "Match any word with 1 or more 'e'",
				"text": "b be bee beer",
				"expected": ["be", "bee", "beer"]
			},
			{
				"description": "Match color and colour\nTry using '?'",
				"text": "color colour",
				"expected": ["color", "colour"]
			},
			{
				"description": "Match evry word except 'a'",
				"text": "a aabbcc aacc aa",
				"expected": ["aabbcc", "aacc", "aa"]
			}
		]
	},
	{
		"token": "|",
		"description": "Matches either the expression before or after '|'.",
		"exercises": [
			{
				"description": "Match either 'cat' or 'dog'",
				"text": "cat dog bird",
				"expected": ["cat", "dog"]
			},
			{
				"description": "Match any 3-letter word starting with 'b' or 'c'",
				"text": "bat cat rat mat cap cup",
				"expected": ["bat", "cat", "cap", "cup"]
			},
			{
				"description": "Match either a number or the word 'unknown'",
				"text": "Age: 25, Height: unknown, Score: 100",
				"expected": ["25", "unknown", "100"]
			}
		]
	},
	{
		"token": "{n}, {n,}, {n,m}",
		"description": "Matches previous token exactly n times or n and more times or between n and m times.",
		"exercises": [
			{
				"description": "Match any 3 character sequence",
				"text": "abc def gh ijkl mn",
				"expected": ["abc", "def", "ijk"]
			},
			{
				"description": "Match sequences of at least one lowercase letter",
				"text": "Hello world! 123 abc A1b2",
				"expected": ["ello", "world", "abc"]
			},
			{
				"description": "Match numbers that are between 2 and 4 digits long",
				"text": "9 12 123 1234 12345 6 7890",
				"expected": ["12", "123", "1234", "7890"]
			}
		]
	},
	{
		"token": "^$",
		"description": "'^' matches start of string or line and '$' matches end of string or line.",
		"exercises": [
			{
				"description": "Match lines starting with 'Hello'",
				"text": "Hello world\nHi there\nHello again",
				"expected": ["Hello", "Hello"]
			},
			{
				"description": "Match lines ending with '!'",
				"text": "Hello!\nWhat a day\nWow!\nOkay.",
				"expected": ["Hello!", "Wow!"]
			},
			{
				"description": "Match lines that contain only the word 'yes'",
				"text": "yes\nno\nyes indeed\n  yes\nyes\n",
				"expected": ["yes", "yes"]
			}
		]
	}
]
