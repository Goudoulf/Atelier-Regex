[
	{
		"token": "a",
		"description": "Matches the exact character or string 'a'. Escapes are needed for metacharacters like '.', '*', etc. (e.g., '*' -> '\\*')",
		"exercises": [
			{
				"description": "Match every 'a' character in the text",
				"text": "abcABC123",
				"expected": ["a"]
			},
			{
				"description": "Match every '123' word in the text",
				"text": "12 123 1234",
				"expected": ["123", "123"]
			},
			{
				"description": "Match only cat and cut words in the text",
				"text": "cat cut coat",
				"expected": ["cat", "cut"]
			}
		]
	},
	{
		"token": "\\w",
		"description": "Matches any word character: letter (a-z, A-Z), digit (0-9), or underscore (_).\nTo match every non word character we can use '\\W'.",
		"exercises": [
			{
				"description": "Match every word character in the text",
				"text": "a1b2_  c3D4",
				"expected": ["a", "1", "b", "2", "_", "c", "3", "D", "4"]
			},
			{
				"description": "Match every non word character in the text",
				"text": "abc123-= def_456? ghi789.",
				"expected": ["-", "=", " ", "?", " ", "."]
			}
		]
	},
	{
		"token": "\\d",
		"description": "Matches any digit character (0-9).\nTo match any non digit character we can use '\\D'.",
		"exercises": [
			{
				"description": "Match every digit character in the text",
				"text": "a1b2c3d4",
				"expected": ["1", "2", "3", "4"]
			},
			{
				"description": "Match phone numbers in format 123-456-7890",
				"text": "Call me at 123-456-7890 or 987-654-3210.",
				"expected": ["123", "456", "7890", "987", "654", "3210"]
			},
			{
				"description": "Match every non digit character",
				"text": "a1b2c3d4",
				"expected": ["a", "b", "c", "d"]
			}
		]
	},
	{
		"token": "\\s",
		"description": "Matches any whitespace character (space, tab, newline).\nTo match any non whitespace character we can use '\\S'.",
		"exercises": [
			{
				"description": "Match all whitespace characters in the text",
				"text": "Hello world!\nThis is\tgreat.",
				"expected": [" ", "\n", " ", "\t"]
			},
			{
				"description": "Match sequences of two whitespace characters",
				"text": "a\t b\n c\t\t d",
				"expected": ["\t ", "\n ", "\t\t"]
			},
			{
				"description": "Match 'X7 A@b', 'Z2 #%3', '12 A+b'",
				"text": "X7 A@b\nZ2 #%3\nA5Bb\n12 A+b\nA5 A b",
				"expected": ["X7 A@b", "Z2 #%3", "12 A+b"]
			}
		]
	},
	{
		"token": "[abc]",
		"description": "Matches any character inside the brackets.",
		"exercises": [
			{
				"description": "Match vowels 'a', 'e', 'i' in text",
				"text": "apple pie is nice",
				"expected": ["a", "e", "i", "e", "i", "i", "e"]
			},
			{
				"description": "Match can, van, ran",
				"text": "man nan can lan van ran",
				"expected": ["can", "van", "ran"]
			}
		]
	},
	{
		"token": "[^abc]",
		"description": "Matches any character except those in the brackets.",
		"exercises": [
			{
				"description": "Match characters except a, b, c",
				"text": "abcxyzABC123",
				"expected": ["x", "y", "z", "A", "B", "C", "1", "2", "3"]
			},
			{
				"description": "Match digits only",
				"text": "abcdefghijkl1234567",
				"expected": ["1", "2", "3", "4", "5", "6", "7"]
			}
		]
	},
	{
		"token": "[a-z]",
		"description": "Matches any character between two specified character that can be digits or letters.",
		"exercises": [
			{
				"description": "Match lowercase letters only",
				"text": "AbCdeFGhij",
				"expected": ["b", "d", "e", "h", "i", "j"]
			},
			{
				"description": "Match uppercase letters followed by a digit",
				"text": "A1bCdeF2G3hijkLM4nO5",
				"expected": ["A1", "F2", "G3", "M4", "O5"]
			},
			{
				"description": "Match 'a23b4c' and 'd56e7f' but not 'f78d5c'",
				"text": "a23b4c, d56e7f, f76d5c",
				"expected": ["a23b4c", "d56e7f"]
			}
		]
	},
	{
		"token": "?*+",
		"description": "'?' matches previous token 0 or 1 time.\n'*' matches previous token 0 or more time.\n'+' matches previous token 1 or more time.",
		"exercises": [
			{
				"description": "Match any word with 1 or more 'e'",
				"text": "b be bee beer",
				"expected": ["be", "bee", "beer"]
			},
			{
				"description": "Match color and colour\nTry using '?'",
				"text": "color colour",
				"expected": ["color", "colour"]
			},
			{
				"description": "Match evry word except 'a'",
				"text": "a aabbcc aacc aa",
				"expected": ["aabbcc", "aacc", "aa"]
			}
		]
	},
	{
		"token": "|",
		"description": "Matches either the expression before or after '|'.",
		"exercises": [
			{
				"description": "Match either 'cat' or 'dog'",
				"text": "cat dog bird",
				"expected": ["cat", "dog"]
			},
			{
				"description": "Match any 3-letter word starting with 'b' or 'c'",
				"text": "bat cat rat mat cap cup",
				"expected": ["bat", "cat", "cap", "cup"]
			},
			{
				"description": "Match either a number or the word 'unknown'",
				"text": "Age: 25, Height: unknown, Score: 100",
				"expected": ["25", "unknown", "100"]
			}
		]
	},
	{
		"token": "{n}, {n,}, {n,m}",
		"description": "Matches previous token exactly n times with '{n}' or n and more times with '{n,}' or between n and m times with '{n,m}'.",
		"exercises": [
			{
				"description": "Match any 3 character sequence",
				"text": "abc def gh ijkl mn",
				"expected": ["abc", "def", "ijk"]
			},
			{
				"description": "Match sequences of at least one lowercase letter",
				"text": "Hello world! 123 abc A1b2",
				"expected": ["ello", "world", "abc"]
			},
			{
				"description": "Match numbers that are between 2 and 4 digits long",
				"text": "9 12 123 1234 12345 6 7890",
				"expected": ["12", "123", "1234", "7890"]
			},
			{
				"description": "Match sequences of exactly 2 digits followed by exactly 3 lowercase letters",
				"text": "12abc 34def 5ghij 678klm 90nopq",
				"expected": ["12abc", "34def"]
			}
		]
	},
	{
		"token": "^$",
		"description": "'^' matches start of string or line and '$' matches end of string or line.",
		"exercises": [
			{
				"description": "Match lines starting with 'Hello'",
				"text": "Hello world\nHi there\nHello again",
				"expected": ["Hello", "Hello"]
			},
			{
				"description": "Match lines ending with '!'",
				"text": "Hello!\nWhat a day\nWow!\nOkay.",
				"expected": ["Hello!", "Wow!"]
			},
			{
				"description": "Match lines that contain only the word 'yes'",
				"text": "yes\nno\nyes indeed\n  yes\nyes\n",
				"expected": ["yes", "yes"]
			},
			{
				"description": "Match exact phone numbers starting with 0 and 9 digits after",
				"text": "0123456789\n1234567890\n0987654321\n01234",
				"expected": ["0123456789", "0987654321"]
			},
			{
				"description": "Match lines containing only a simple email format",
				"text": "test@example.com\ninvalid-email\njohn.doe@domain.net\nno@at\nuser@site.org",
				"expected": ["test@example.com", "john.doe@domain.net", "user@site.org"]
			}
		]
	},
	{
		"token": "()",
		"description": "Parentheses `()` create capturing groups in a regex. They allow you to extract specific parts of a matched pattern.",
		"exercises": [
			{
				"description": "Extract year, month, and day from a date (YYYY-MM-DD)",
				"text": "Today is 2023-11-15 and yesterday was 2023-11-14.",
				"expected": ["2023-11-15", "2023", "11", "15", "2023-11-14", "2023", "11", "14"]
			},
			{
				"description": "Extract hours, minutes and seconds from times",
				"text": "The event is at 12:34:56 and ends at 23:59:59.",
				"expected": ["12:34:56", "12", "34", "56", "23:59:59", "23", "59", "59"]
			},
			{
				"description": "Match email address and extract id and domain from emails (id@domain.com)",
				"text": "contact@example.com\nadmin@test.org\nuser@website.net\n42@lyon",
				"expected": ["contact@example.com", "contact", "example", "admin@test.org", "admin", "test", "user@website.net", "user", "website"]
			}
		]
	},
	{
		"token": "(?:)",
		"description": "Non-capturing groups `(?:...)` group part of a regex without creating a capturing group.",
		"exercises": [
			{
				"description": "Match both 'color' and 'colour' using a non-capturing group",
				"text": "The American spelling is color, while the British is colour.",
				"expected": ["color", "colour"]
			},
			{
				"description": "Match phone numbers that begin with either +33 or 0 (non-capturing), followed by 9 digits",
				"text": "Call me on +33612345678 or 0612345678, but not on 123456789.",
				"expected": ["+33612345678", "0612345678"]
			},
			{
				"description": "Match version numbers like 'v1.2' or 'ver1.2' using a non-capturing group",
				"text": "We released v1.2 yesterday and ver1.3 today. Expect v2.0 soon.",
				"expected": ["v1.2", "ver1.3", "v2.0"]
			},
			{
				"description": "Match any content between <b>...</b> and <strong>...</strong>",
				"text": "This an <b>important text</b>, and here an <strong>other word</strong>. But <i>this word</i> must not be captured.",
				"expected": ["<b>important text</b>", "important text", "<strong>other word</strong>", "other word"]
			}
		]
	}
]
