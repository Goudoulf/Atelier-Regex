[
	{
		"token": "a",
		"description": "Matches any character or word specified literally in the pattern.\nThis means the regex matches the exact sequence of characters written.\nIt does not match metacharacters unless they are escaped (e.g., `.` -> `\\.` or `*` -> `\\*`).\nThe metacharacter '.' will match every character except newline.",
		"exercises": [
			{
				"description": "Match every 'a' character in the text",
				"text": "abcABC123",
				"expected": ["a"]
			},
			{
				"description": "Match every '123' word in the text",
				"text": "12 123 1234",
				"expected": ["123", "123"]
			},
			{
				"description": "Match only cat and cut words in the text",
				"text": "cat cut coat",
				"expected": ["cat", "cut"]
			}
		]
	},
	{
		"token": "\\w",
		"description": "Match any word character: letter (a-z, A-Z), digit (0-9), or underscore (_).\nTo match every non word character we can use '\\W'.",
		"exercises": [
			{
				"description": "Match every word character in the text",
				"text": "a1b2_  c3D4",
				"expected": ["a", "1", "b", "2", "_", "c", "3", "D", "4"]
			},
			{
				"description": "Match every non word character in the text",
				"text": "abc123-= def_456? ghi789.",
				"expected": ["-", "=", " ", "?", " ", "."]
			}
		]
	},
	{
		"token": "\\d",
		"description": "Match any digit character (0-9).\nTo match any non digit character we can use '\\D'.",
		"exercises": [
			{
				"description": "Match every digit character in the text",
				"text": "a1b2c3d4",
				"expected": ["1", "2", "3", "4"]
			},
			{
				"description": "Match phone numbers in format 123-456-7890",
				"text": "Call me at 123-456-7890 or 987-654-3210.",
				"expected": ["123", "456", "7890", "987", "654", "3210"]
			},
			{
				"description": "Match every non digit character",
				"text": "a1b2c3d4",
				"expected": ["a", "b", "c", "d"]
			}
		]
	},
	{
		"token": "\\s",
		"description": "Match any whitespace character (space, tab, newline).\nTo match any non whitespace character we can use '\\S'.",
		"exercises": [
			{
				"description": "Match all whitespace characters in the text",
				"text": "Hello world!\nThis is\tgreat.",
				"expected": [" ", "\n", " ", "\t"]
			},
			{
				"description": "Match sequences of two whitespace characters",
				"text": "a\t b\n c\t\t d",
				"expected": ["\t ", "\n ", "\t\t"]
			}
		]
	},
	{
		"token": "[abc]",
		"description": "match any character inside the brackets.",
		"exercises": [
			{
				"description": "Match vowels 'a', 'e', 'i' in text",
				"text": "apple pie is nice",
				"expected": ["a", "e", "i", "e", "i", "i", "e"]
			},
			{
				"description": "Match digits 1, 3, or 5 only",
				"text": "1234567890",
				"expected": ["1", "3", "5"]
			}
		]
	},
	{
		"token": "[^abc]",
		"description": "Match any character except those in the brackets.",
		"exercises": [
			{
				"description": "Match characters except a, b, c",
				"text": "abcxyzABC123",
				"expected": ["x", "y", "z", "A", "B", "C", "1", "2", "3"]
			},
			{
				"description": "Match digits only",
				"text": "a1b2c3",
				"expected": ["1", "2", "3"]
			}
		]
	},
	{
		"token": "[a-z]",
		"description": "Match any character between two specified character that can be digits or letters.",
		"exercises": [
			{
				"description": "Match lowercase letters only",
				"text": "AbCdeFGhij",
				"expected": ["b", "d", "e", "h", "i", "j"]
			},
			{
				"description": "Match words made of lowercase letters",
				"text": "hello WORLD 123",
				"expected": ["hello"]
			}
		]
	},
	{
		"token": "?*+",
		"description": "'?' matches previous token 0 or one time.\n'*' matches previous token 0 or multiple time.\n'+' matches previous token 1 or multiple time.",
		"exercises": [
			{
				"description": "Match zero or more 'a's",
				"text": "aaabaaac",
				"expected": ["aaa", "aaa"]
			},
			{
				"description": "Match sequences of letters followed by digits (using \\w*\\d+)",
				"text": "abc123 xyz4567 89",
				"expected": ["abc123", "xyz4567", "89"]
			},
			{
				"description": "Match zero or more digits between letters",
				"text": "a123b4567c89d",
				"expected": ["123", "4567", "89"]
			}
		]
	},
	{
		"token": "|",
		"description": "match either the expression before or after |.",
		"exercises": [
			{
				"description": "Match either 'cat' or 'dog'",
				"text": "cat dog bird",
				"expected": ["cat", "dog"]
			},
			{
				"description": "Match vowels or digits",
				"text": "a1b2c3d4",
				"expected": ["a", "1", "b", "2", "c", "3", "d", "4"]
			}
		]
	},
	{
		"token": "{n}, {n,}, {n,m}",
		"description": "match previous token exactly n times.",
		"exercises": [
			{
				"description": "Match exactly 3 digits",
				"text": "12 123 1234 567",
				"expected": ["123", "567"]
			},
			{
				"description": "Match exactly 2 letters 'ab'",
				"text": "ab abc aabb abbb",
				"expected": ["ab", "ab"]
			}
		]
	},
	{
		"token": "^$",
		"description": "match start of string or line.",
		"exercises": [
			{
				"description": "Match lines starting with 'Hello'",
				"text": "Hello world\nHi there\nHello again",
				"expected": ["Hello", "Hello"]
			},
			{
				"description": "Match words starting at beginning of string",
				"text": "start middle end",
				"expected": ["start"]
			}
		]
	},
	{
		"token": "Combined example",
		"description": "Match words starting with a digit, then letters, optionally ending with underscore and digits.",
		"exercises": [
			{
				"description": "Match '3dogs_45' and '2cats'",
				"text": "3dogs_45 2cats 4birds 5fish_",
				"pattern": "\\d\\w+(?:_\\d+)?",
				"expected": ["3dogs_45", "2cats", "4birds", "5fish_"]
			}
		]
	}

]
